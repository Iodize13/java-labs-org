#+title: Programming in the Large II: Objects and Classes (Part 1)

#+SETUPFILE: org-html-themes/org/theme-readtheorg-local.setup
#+SETUPFILE: org-themes-master/src/rethink_inline/rethink_inline.theme
#+HTML_HEAD: <style> #content{max-width:1800px;}</style>
#+HTML_HEAD: <style> p{max-width:800px;}</style>
#+HTML_HEAD: <style> li{max-width:800px;}</style
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="readtheorg.css"/>
# #+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
# #+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
# #+HTML_HEAD: <script type="text/javascript" src="org-html-themes/src/lib/js/jquery.stickytableheaders.min.js"></script>
# #+HTML_HEAD: <script type="text/javascript" src="org-html-themes/src/readtheorg_theme/js/readtheorg.js"></script>

* *Summary of "Programming in the Large II: Objects and Classes (Part 1)"*
:PROPERTIES:
:CUSTOM_ID: summary-of-programming-in-the-large-ii-objects-and-classes-part-1
:END:
** *OOP vs. Task-Oriented Programming*
:PROPERTIES:
:CUSTOM_ID: oop-vs.-task-oriented-programming
:END:
- Traditional programming focuses on tasks and procedures.\\
- OOP models the real world by focusing on objects that:
  - Have behaviors.\\
  - Hold information.\\
  - Interact with one another.

** *OOP Basics*
:PROPERTIES:
:CUSTOM_ID: oop-basics
:END:
- *Class*: A blueprint for creating objects.\\
- *Object*: An instance of a class, containing instance variables and
  methods.\\
- *Instance Method*: A method belonging to an object.\\
- *Instance Variable*: A variable belonging to an object.

** *Classes and Objects*
:PROPERTIES:
:CUSTOM_ID: classes-and-objects
:END:
1. *What is a Class?*
   - A "factory" for constructing objects.\\
   - Defines the structure and behavior of objects.\\
   - Objects created from the same class share the same structure but
     have independent data.
2. *Class vs. Object*
   - *Class*: A type.\\
   - *Object*: A specific instance of that type (e.g., =String msg;=
     where =String= is a class, and =msg= is an object).

** *Static vs. Instance Variables and Methods*
:PROPERTIES:
:CUSTOM_ID: static-vs.-instance-variables-and-methods
:END:
- *Static Variables and Methods (Class Variables/Methods):*
  - Belong to the class as a whole.\\
  - Shared across all instances.\\
  - Example: =UserData.name= is a static variable.
- *Instance Variables and Methods:*
  - Belong to individual objects.\\
  - Each object maintains its own copy.\\
  - Example: `PlayerData jordan

* *FAQ: Programming in the Large II - Objects and Classes*
:PROPERTIES:
:CUSTOM_ID: faq-programming-in-the-large-ii---objects-and-classes
:END:
** *1. What is a class in programming?*
:PROPERTIES:
:CUSTOM_ID: what-is-a-class-in-programming
:END:
A class is a blueprint or factory for creating objects. It defines the
structure (variables) and behavior (methods) of objects that belong to
it.

** *2. What is an object?*
:PROPERTIES:
:CUSTOM_ID: what-is-an-object
:END:
An object is an instance of a class. It is a concrete representation of
the class that contains its own set of variables and methods.

** *3. How do classes and objects relate?*
:PROPERTIES:
:CUSTOM_ID: how-do-classes-and-objects-relate
:END:
- *Class*: Defines the type and blueprint.\\
- *Object*: A specific value or instance created using the class.

** *4. What is the difference between instance and static variables?*
:PROPERTIES:
:CUSTOM_ID: what-is-the-difference-between-instance-and-static-variables
:END:
- *Instance Variables*: Belong to an object; each object has its own
  copy.\\
- *Static Variables*: Belong to the class itself and are shared by all
  objects of the class.

** *5. Can you give an example of a static variable?*
:PROPERTIES:
:CUSTOM_ID: can-you-give-an-example-of-a-static-variable
:END:
#+begin_src java
class UserData {
    static String name; // Shared by all instances of UserData
}
#+end_src

Here, =UserData.name= is a static variable accessible without creating
an object.

** *6. What is an instance method?*
:PROPERTIES:
:CUSTOM_ID: what-is-an-instance-method
:END:
An instance method operates on the instance variables of an object and
is invoked on specific objects.

** *7. What is a static method?*
:PROPERTIES:
:CUSTOM_ID: what-is-a-static-method
:END:
A static method belongs to the class itself and can be called without
creating an instance. Static methods can only access static variables.

** *8. How do you create an object in Java?*
:PROPERTIES:
:CUSTOM_ID: how-do-you-create-an-object-in-java
:END:
Using the =new= keyword:

#+begin_src java
PlayerData jordan = new PlayerData();
#+end_src

Here, =jordan= is an object of the =PlayerData= class.

** *9. What are instance variables?*
:PROPERTIES:
:CUSTOM_ID: what-are-instance-variables
:END:
These are variables defined in a class but are specific to each object.
For example:

#+begin_src java
class PlayerData {
    String name; // Instance variable
    int age;     // Instance variable
}
#+end_src

** *10. What is the benefit of using OOP?*
:PROPERTIES:
:CUSTOM_ID: what-is-the-benefit-of-using-oop
:END:
OOP models real-world entities, making code more intuitive, modular,
reusable, and easier to maintain compared to task-oriented programming.

**สรุป "Programming in the Large II: Objects and Classes (Part 1)"**

**OOP vs. Task-Oriented Programming**
- การเขียนโปรแกรมแบบดั้งเดิมจะเน้นที่งานและขั้นตอนต่างๆ
- OOP (Object-Oriented Programming) จำลองโลกจริงโดยเน้นที่ **objects** ที่:
  - มีพฤติกรรม
  - เก็บข้อมูล
  - โต้ตอบกัน

**OOP เบื้องต้น**
- **Class**: แม่แบบสำหรับการสร้าง objects
- **Object**: คือ instance ของ class ซึ่งประกอบด้วย instance variables และ methods
- **Instance Method**: คือ method ที่เป็นของ object
- **Instance Variable**: คือ variable ที่เป็นของ object

**Classes and Objects**
1. **Class คืออะไร?**
   - เป็น "โรงงาน" สำหรับสร้าง objects
   - กำหนดโครงสร้างและพฤติกรรมของ objects
   - Objects ที่สร้างจาก class เดียวกันจะแชร์โครงสร้างเดียวกัน แต่มีข้อมูลที่เป็นอิสระ
2. **Class กับ Object ต่างกันอย่างไร?**
   - **Class**: เป็นประเภท (type)
   - **Object**: คือ instance เฉพาะของประเภทนั้น (เช่น `String msg;` ที่ `String` คือ class และ `msg` คือ object)

**Static vs. Instance Variables and Methods**
- **Static Variables and Methods (Class Variables/Methods)**:
  - เป็นของ class ทั้งหมด
  - ใช้ร่วมกันระหว่างทุก instance
  - ตัวอย่าง: `UserData.name` คือ static variable
- **Instance Variables and Methods**:
  - เป็นของ object แต่ละตัว
  - ทุก object จะมีสำเนาของตัวเอง
  - ตัวอย่าง: `PlayerData jordan`

**FAQ: Programming in the Large II - Objects and Classes**

1. **Class ในการเขียนโปรแกรมคืออะไร?**
   - Class คือแม่แบบหรือโรงงานสำหรับการสร้าง objects โดยกำหนดโครงสร้าง (variables) และพฤติกรรม (methods) ของ objects ที่เป็นของมัน

2. **Object คืออะไร?**
   - Object คือ instance ของ class เป็นตัวแทนที่เป็นรูปธรรมของ class ซึ่งมีตัวแปรและวิธีการของตัวเอง

3. **Class และ Object เกี่ยวข้องกันอย่างไร?**
   - **Class**: กำหนดประเภทและแม่แบบ
   - **Object**: ค่าหรือ instance เฉพาะที่สร้างจาก class

4. **ตัวแปร instance และ static ต่างกันอย่างไร?**
   - **Instance Variables**: เป็นของ object แต่ละตัว โดยแต่ละ object จะมีสำเนาของตัวเอง
   - **Static Variables**: เป็นของ class และใช้ร่วมกันระหว่างทุก object ของ class

5. **สามารถยกตัวอย่างตัวแปร static ได้ไหม?**
   ```java
   class UserData {
       static String name; // ใช้ร่วมกันระหว่างทุก instance ของ UserData
   }
   ```
   ที่นี่ `UserData.name` คือ static variable ซึ่งสามารถเข้าถึงได้โดยไม่ต้องสร้าง object

6. **Instance Method คืออะไร?**
   - Instance Method ทำงานกับ instance variables ของ object และถูกเรียกใช้บน object เฉพาะ

7. **Static Method คืออะไร?**
   - Static Method เป็นของ class และสามารถเรียกใช้ได้โดยไม่ต้องสร้าง instance โดย static methods จะเข้าถึงได้แค่ static variables

8. **จะสร้าง object ใน Java ได้อย่างไร?**
   - ใช้คำว่า `new`:
   ```java
   PlayerData jordan = new PlayerData();
   ```
   ที่นี่ `jordan` คือ object ของ class `PlayerData`

9. **Instance Variables คืออะไร?**
   - Instance Variables คือ variables ที่กำหนดใน class แต่มักจะเป็นของแต่ละ object เช่น:
   ```java
   class PlayerData {
       String name; // Instance variable
       int age;     // Instance variable
   }
   ```

10. **ข้อดีของการใช้ OOP คืออะไร?**
    - OOP จำลองเอนทิตีในโลกจริง ทำให้โค้ดเข้าใจง่าย เป็นโมดูล ใช้ซ้ำได้ และดูแลรักษาได้ง่ายกว่าเมื่อเทียบกับการเขียนโปรแกรมที่เน้นงานเป็นหลัก

* ทับศัพท์คำว่าก็อปปี้
* ask gpt which header I should include picture?
