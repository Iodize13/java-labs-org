*** *Summary of "Programming in the Large II: Objects and Classes
(Part 1)"*
:PROPERTIES:
:CUSTOM_ID: summary-of-programming-in-the-large-ii-objects-and-classes-part-1
:END:
**** *Agenda*
:PROPERTIES:
:CUSTOM_ID: agenda
:END:
The key concepts covered include:\\
- Object-Oriented (OO) Programming\\
- Declaring and Creating Objects\\
- Constructors, Modifiers\\
- Instance and Class Variables/Methods\\
- Programming with Objects

--------------

**** *OOP vs. Task-Oriented Programming*
:PROPERTIES:
:CUSTOM_ID: oop-vs.-task-oriented-programming
:END:
- Traditional programming focuses on tasks and procedures.\\
- OOP models the real world by focusing on objects that:
  - Have behaviors.\\
  - Hold information.\\
  - Interact with one another.

--------------

**** *OOP Basics*
:PROPERTIES:
:CUSTOM_ID: oop-basics
:END:
- *Class*: A blueprint for creating objects.\\
- *Object*: An instance of a class, containing instance variables and
  methods.\\
- *Instance Method*: A method belonging to an object.\\
- *Instance Variable*: A variable belonging to an object.

--------------

**** *Classes and Objects*
:PROPERTIES:
:CUSTOM_ID: classes-and-objects
:END:
1. *What is a Class?*
   - A "factory" for constructing objects.\\
   - Defines the structure and behavior of objects.\\
   - Objects created from the same class share the same structure but
     have independent data.
2. *Class vs. Object*
   - *Class*: A type.\\
   - *Object*: A specific instance of that type (e.g., =String msg;=
     where =String= is a class, and =msg= is an object).

--------------

**** *Static vs. Instance Variables and Methods*
:PROPERTIES:
:CUSTOM_ID: static-vs.-instance-variables-and-methods
:END:
- *Static Variables and Methods (Class Variables/Methods):*
  - Belong to the class as a whole.\\
  - Shared across all instances.\\
  - Example: =UserData.name= is a static variable.
- *Instance Variables and Methods:*
  - Belong to individual objects.\\
  - Each object maintains its own copy.\\
  - Example: `PlayerData jordan
